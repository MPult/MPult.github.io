"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[853],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),i=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,c=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=i(r),h=a,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||c;return r?n.createElement(m,o(o({ref:t},d),{},{components:r})):n.createElement(m,o({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=r.length,o=new Array(c);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var i=2;i<c;i++)o[i]=r[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},3488:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>i});var n=r(7462),a=(r(7294),r(3905));const c={title:"class thread"},o="class thread",s={unversionedId:"thread/class_thread",id:"version-cpp-14/thread/class_thread",title:"class thread",description:"Multithreading",source:"@site/versioned_docs/version-cpp-14/thread/class_thread.md",sourceDirName:"thread",slug:"/thread/class_thread",permalink:"/docs/cpp-14/thread/class_thread",draft:!1,editUrl:"https://github.com/cppdocs/cppdocs.github.io/tree/main/versioned_docs/version-cpp-14/thread/class_thread.md",tags:[],version:"cpp-14",frontMatter:{title:"class thread"},sidebar:"tutorialSidebar",previous:{title:"<thread>",permalink:"/docs/cpp-14/thread/"},next:{title:"namespace this_thread",permalink:"/docs/cpp-14/thread/namespace_this_thread"}},l={},i=[{value:"Multithreading",id:"multithreading",level:2},{value:"Constructor",id:"constructor",level:2},{value:"swap()",id:"swap",level:2}],d={toc:i};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"class-thread"},"class thread"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\nclass thread {\npublic:\n    class id;\n    typedef pthread_t native_handle_type;\n    thread() noexcept;\n    template <class F, class ...Args> explicit thread(F&& f, Args&&... args);\n    thread(const thread&) = delete;\n    thread(thread&& t) noexcept;\n    ~thread();\n    \n    void detach();\n    id get_id() const noexcept;\n    static unsigned hardware_concurrency() noexcept;\n    void join();\n    bool joinable() const noexcept;\n    native_handle_type native_handle();\n    void swap(thread& t) noexcept;\n\n    thread& operator=(const thread&) = delete;\n    thread& operator=(thread&& t) noexcept;\n};\n}\n")),(0,a.kt)("h2",{id:"multithreading"},"Multithreading"),(0,a.kt)("p",null,"To multithread in C++ you must create a std::thread object with a function pointer like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::thread thread1(function1, args...);\n")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <thread>\n#include <iostream>\n\nint result = 0;\n\nvoid function1(int x, int y) {\n    result = x + y;\n}\n\nint main() {\n    std::thread thread1(function1, 4, 6);\n    std::cout << "Working in another thread" << std::endl;\n    thread1.join();\n    std::cout << "Here is the result: " << result << std::endl;\n}\n')),(0,a.kt)("h2",{id:"constructor"},"Constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"thread() noexcept;\ntemplate <class F, class ...Args> explicit thread(F&& f, Args&&... args);\nthread(const thread&) = delete;\nthread(thread&& t) noexcept;\n")),(0,a.kt)("p",null,"Creates a thread object."),(0,a.kt)("h2",{id:"swap"},"swap()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void swap(thread& t) noexcept;\n")))}p.isMDXComponent=!0}}]);