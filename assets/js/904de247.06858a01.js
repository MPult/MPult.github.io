"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[549],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=s.createContext({}),p=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return s.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},f=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||r;return n?s.createElement(d,o(o({ref:t},l),{},{components:n})):s.createElement(d,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}f.displayName="MDXCreateElement"},164:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var s=n(7462),a=(n(7294),n(3905));const r={},o="class basic_fstream",i={unversionedId:"io/fstream/class_basic_fstream",id:"version-cpp-14/io/fstream/class_basic_fstream",title:"class basic_fstream",description:"fstream handles file input and output.",source:"@site/versioned_docs/version-cpp-14/io/fstream/class_basic_fstream.md",sourceDirName:"io/fstream",slug:"/io/fstream/class_basic_fstream",permalink:"/docs/cpp-14/io/fstream/class_basic_fstream",draft:!1,editUrl:"https://github.com/cppdocs/cppdocs.github.io/tree/main/versioned_docs/version-cpp-14/io/fstream/class_basic_fstream.md",tags:[],version:"cpp-14",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"<fstream>",permalink:"/docs/cpp-14/io/fstream/"},next:{title:"<thread>",permalink:"/docs/cpp-14/thread/"}},c={},p=[{value:"Constructor",id:"constructor",level:2},{value:"close()",id:"close",level:2},{value:"is_open()",id:"is_open",level:2},{value:"open()",id:"open",level:2},{value:"rdbuf()",id:"rdbuf",level:2},{value:"swap()",id:"swap",level:2}],l={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"class-basic_fstream"},"class basic_fstream"),(0,a.kt)("p",null,"fstream handles file input and output."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class charT, class traits=char_traits<charT>>\n  class basic_fstream : public basic_iostream <charT,traits>\n{\npublic:\n    typedef charT char_type;\n    typedef traits traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n    basic_fstream();\n    explicit basic_fstream(const char* s, ios_base::openmode mode = ios_base::in|ios_base::out);\n    explicit basic_fstream(const string& s, ios_base::openmode mode = ios_base::in|ios_base::out);\n    basic_fstream(basic_fstream&& rhs);\n\n    void close();\n    bool is_open() const;\n    void open(const char* s, ios_base::openmode mode = ios_base::in|ios_base::out);\n    void open(const string& s, ios_base::openmode mode = ios_base::in|ios_base::out);\n    void swap(basic_fstream& rhs);\n    basic_filebuf<char_type, traits_type>* rdbuf() const;\n\n    basic_fstream& operator=(basic_fstream&& rhs);\n};\n}\n")),(0,a.kt)("p",null,"As you can std::basic_fstream (which is basically std::fstream) defines basic file functions like close, open and is_open.\nHowever it does not define any file io."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"constructor"},"Constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"basic_fstream();\nexplicit basic_fstream(const char* s, ios_base::openmode mode = ios_base::in|ios_base::out);\nexplicit basic_fstream(const string& s, ios_base::openmode mode = ios_base::in|ios_base::out);\nbasic_fstream(basic_fstream&& rhs);\nbasic_fstream& operator=(basic_fstream&& rhs);\n")),(0,a.kt)("p",null,"Create a basic_fstream object.\nOpen a file named s, with mode mode (defaults to read/write)."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"close"},"close()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void close();\n")),(0,a.kt)("p",null,"If a file is currently open close it."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"is_open"},"is_open()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool is_open() const;\n")),(0,a.kt)("p",null,"Returns true if a file is open.\nExample:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <fstream>\n\nint main() {\n  std::fstream fout("file.out");\n\n  if (!fout.is_open()) {\n    // do something if file could not be opened\n  }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"open"},"open()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void open(const char* s, ios_base::openmode mode = ios_base::in|ios_base::out);\nvoid open(const string& s, ios_base::openmode mode = ios_base::in|ios_base::out);\n")),(0,a.kt)("p",null,"Open a file named s, with mode mode (defaults to r/w)."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"rdbuf"},"rdbuf()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"basic_filebuf<char_type, traits_type>* rdbuf() const;\n")),(0,a.kt)("p",null,"Returns a pointer to a basic_filebuf."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"swap"},"swap()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void swap(basic_fstream& rhs);\n")),(0,a.kt)("p",null,"Swaps current fstream with another fstream.\nExample:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <fstream>\n\nint main() {\n  std::fstream one("one.txt");\n  std::fstream two("two.txt");\n\n  one.swap(two);\n  one << "Hello" << std::endl; // Will print to the file two.txt\n}\n')))}m.isMDXComponent=!0}}]);