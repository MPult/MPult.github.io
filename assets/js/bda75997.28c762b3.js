"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[512],{3905:(t,e,r)=>{r.d(e,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var s=n.createContext({}),c=function(t){var e=n.useContext(s),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},p=function(t){var e=c(t.components);return n.createElement(s.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},f=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),u=c(r),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return r?n.createElement(d,l(l({ref:e},p),{},{components:r})):n.createElement(d,l({ref:e},p))}));function d(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,l=new Array(o);l[0]=f;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[u]="string"==typeof t?t:a,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3821:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"<algorithm>"},l="algorithm",i={unversionedId:"algorithm/algorithm",id:"version-cpp-14/algorithm/algorithm",title:"<algorithm>",description:"Algorithm includes a collection functions for manipulating data.",source:"@site/versioned_docs/version-cpp-14/algorithm/algorithm.md",sourceDirName:"algorithm",slug:"/algorithm/",permalink:"/docs/cpp-14/algorithm/",draft:!1,editUrl:"https://github.com/cppdocs/cppdocs.github.io/tree/main/versioned_docs/version-cpp-14/algorithm/algorithm.md",tags:[],version:"cpp-14",frontMatter:{title:"<algorithm>"},sidebar:"tutorialSidebar",previous:{title:"C++ 14",permalink:"/docs/cpp-14/intro"},next:{title:"algorithm functions",permalink:"/docs/cpp-14/algorithm/algorithm_functions"}},s={},c=[{value:"Patterns",id:"patterns",level:2}],p={toc:c};function u(t){let{components:e,...r}=t;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"algorithm"},"algorithm"),(0,a.kt)("p",null,"Algorithm includes a collection functions for manipulating data.\nFor example sort, which sorts things using an algorithm (for more see algorithm#std::sort)"),(0,a.kt)("h2",{id:"patterns"},"Patterns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"_n can usually be append to a function name if the function operates on a range.\nFor example, fill() and fill_n(), fill() takes a start and an end, whereas fill_n take a start and a size.")),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class InputIterator, class Predicate> \n    bool all_of(InputIterator first, InputIterator last, Predicate pred);\n\ntemplate <class InputIterator, class Predicate> \n    bool any_of(InputIterator first, InputIterator last, Predicate pred);\n\ntemplate <class InputIterator, class Predicate> \n    bool none_of(InputIterator first, InputIterator last, Predicate pred);\n\n\ntemplate <class ForwardIterator, class T>\n    void fill(ForwardIterator first, ForwardIterator last, const T& value);\n\ntemplate <class OutputIterator, class Size, class T>\n    OutputIterator fill_n(OutputIterator first, Size n, const T& value);\n\n\ntemplate <class InputIterator, class Function> \n    Function for_each(InputIterator first, InputIterator last, Function f);\n\ntemplate <class InputIterator, class T>\n    InputIterator find(InputIterator first, InputIterator last, const T& value);\n}\n")))}u.isMDXComponent=!0}}]);