"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[788],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=l,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5211:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),l=(n(7294),n(3905));const r={title:"algorithm functions"},i=void 0,o={unversionedId:"algorithm/algorithm_functions",id:"version-cpp-14/algorithm/algorithm_functions",title:"algorithm functions",description:"all_of()",source:"@site/versioned_docs/version-cpp-14/algorithm/algorithm_functions.md",sourceDirName:"algorithm",slug:"/algorithm/algorithm_functions",permalink:"/docs/cpp-14/algorithm/algorithm_functions",draft:!1,editUrl:"https://github.com/cppdocs/cppdocs.github.io/tree/main/versioned_docs/version-cpp-14/algorithm/algorithm_functions.md",tags:[],version:"cpp-14",frontMatter:{title:"algorithm functions"},sidebar:"tutorialSidebar",previous:{title:"<algorithm>",permalink:"/docs/cpp-14/algorithm/"},next:{title:"<chrono>",permalink:"/docs/cpp-14/chrono/"}},s={},u=[{value:"all_of()",id:"all_of",level:2},{value:"any_of()",id:"any_of",level:2},{value:"fill()",id:"fill",level:2},{value:"fill_n()",id:"fill_n",level:2},{value:"find()",id:"find",level:2},{value:"find_if()",id:"find_if",level:2},{value:"for_each()",id:"for_each",level:2},{value:"none_of()",id:"none_of",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"all_of"},"all_of()"),(0,l.kt)("p",null,"all_of returns true if all elements in a range return true"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class InputIterator, class Predicate> \n    bool all_of(InputIterator first, \n                InputIterator last, \n                Predicate pred);\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first is the first element of a range"),(0,l.kt)("li",{parentName:"ul"},"last is the last element of a range"),(0,l.kt)("li",{parentName:"ul"},"pred a function pointer or lambda that returns a boolean")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"When using pointers like in the example below the range is closed, the last value is not included. A range of 0 to 2 means 0, 1."))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <algorithm>\n#include <iostream>\n\nint main() {\n  int x[] = {3, 1, 3, 5, 5, 9};\n\n  if (std::all_of(&x[0], &x[5], [](int n){ return n%2 == 1; })) {\n    std::cout << "all of x is odd" << std::endl;\n    return 0;\n  }\n  std::cout << "not all of x is odd" << std::endl;\n}\n')),(0,l.kt)("p",null,"output: all of x is odd\nbecause none of the elements in x are even, the all_of function returns true"),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"any_of"},"any_of()"),(0,l.kt)("p",null,"any_of returns true if one element in a range returns true"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class InputIterator, class Predicate> \n    bool any_of(InputIterator first, \n                InputIterator last, \n                Predicate pred);\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first is the first element of a range"),(0,l.kt)("li",{parentName:"ul"},"last is the last element of a range"),(0,l.kt)("li",{parentName:"ul"},"pred a function pointer or lambda that returns a boolean")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"When using pointers like in the example below the range is closed, the last value is not included. A range of 0 to 2 means 0, 1."))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <algorithm>\n#include <iostream>\n\nint main() {\n  int x[] = {3, 2, 10, 8, 2, 4};\n\n  if (std::any_of(&x[0], &x[5], [](int n){ return n%2 == 1; })) {\n    std::cout << "at least one element is odd" << std::endl;\n    return 0;\n  }\n  std::cout << "all of x is even" << std::endl;\n}\n')),(0,l.kt)("p",null,"output: at least one element is odd\nbecause none of the elements in x is even, the all_of function returns true"),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"fill"},"fill()"),(0,l.kt)("p",null,"fill() fills a range with a given number.\nfill() takes a start and an end iterator."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class ForwardIterator, class T>\n    void fill(ForwardIterator first, \n              ForwardIterator last, \n              const T& value);\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first is the first element of a range"),(0,l.kt)("li",{parentName:"ul"},"last is the last element of a range"),(0,l.kt)("li",{parentName:"ul"},"value is a value to fill the range")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"When using pointers like in the example below the range is closed, the last value is not included. A range of 0 to 2 means 0, 1."))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <algorithm>\n\nint main() {\n  int a[] = {5, 4, 6, 7, 3, 2};\n  \n  std::fill(&a[0], &a[6], 0);\n}\n")),(0,l.kt)("p",null,"In this example the array a will end up being ","[0, 0, 0, 0, 0, 0]",".\nAgain, if in line 6, at the std::fill function call, we had written &a","[0]",", &a","[5]"," the last element would not be filled, a would be:\n","[0, 0, 0, 0, 0, 2]","."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"fill_n"},"fill_n()"),(0,l.kt)("p",null,"Like fill(), fill_n() fill a range with a given number, the difference is in how you give the range.\nfill_n() takes a start iterator, and a length."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class OutputIterator, class Size, class T>\n    OutputIterator fill_n(OutputIterator first, Size n, const T& value);\n}\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <algorithm>\n\nint main() {\n  int a[6] = {5, 4, 6, 7, 3, 2};\n  \n  std::fill_n(&a[0], 6, 0);\n}\n")),(0,l.kt)("p",null,"In this example the array a is filled with zeros starting from &a","[0]"," to &a","[0]"," + 6."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"find"},"find()"),(0,l.kt)("p",null,"find() attempts to find a given value in a given list.\nIf the value is found, it returns an iterator to value, if the value is not found, it returns an iterator to the last value in the list."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class InputIterator, class T>\n    InputIterator find(InputIterator first, \n                       InputIterator last, \n                       const T& value);\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first is the start of a range"),(0,l.kt)("li",{parentName:"ul"},"last is the end of a range"),(0,l.kt)("li",{parentName:"ul"},"value is a value to find")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"When using pointers like in the example below the range is closed, the last value is not included. A range of 0 to 2 means 0, 1."))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <algorithm>\n\nint main() {\n  int a[] = {5, 4, 6, 7, 3, 2};\n  int value = 9; // Attempt to search for this value\n  \n  int * x = std::find(&a[0], &a[5], value);\n  std::cout << *x << std::endl;\n}\n")),(0,l.kt)("p",null,"Output: 2\nIn this example we search for the value 2 in the array a.\nBecause the value 9 is not in the array, the last value in a is returned, in this case 2.\nIf value were to be 5, the program would output 5, because 5 is in the array."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"find_if"},"find_if()"),(0,l.kt)("p",null,"Exactly the same as ",(0,l.kt)("a",{parentName:"p",href:"algorithm_functions#find"},"find()"),", but, instead of finding a certain value, find a value by passing it to a boolean function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class InputIterator, class Predicate>\n    InputIterator find_if(InputIterator first, InputIterator last, Predicate pred);\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first is the start of a range"),(0,l.kt)("li",{parentName:"ul"},"last is the end of a range"),(0,l.kt)("li",{parentName:"ul"},"pred is a function pointer or lambda that returns a boolean")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"When using pointers like in the example below the range is close, the last value is not included. A range of 0 to 2 means 0, 1."))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int main() {\n  int a[] = {5, 4, 6, 7, 3, 2};\n  int value = 9; // Attempt to search for this value\n  \n  int * x = std::find(&a[0], &a[5], value);\n  std::cout << *x << std::endl;\n}\n")),(0,l.kt)("p",null,"Output: 2\nIn this example we search for the value 2 in the array a.\nBecause the value 9 is not in the array, the last value in a is returned, in this case 2.\nIf value were to be 5, the program would output 5, because 5 is in the array."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"for_each"},"for_each()"),(0,l.kt)("p",null,"Applies a given function to each value in a list."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class InputIterator, class Function> \n    Function for_each(InputIterator first, \n                      InputIterator last, \n                      Function f);\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first is the first element of a list"),(0,l.kt)("li",{parentName:"ul"},"last is the last element of a list"),(0,l.kt)("li",{parentName:"ul"},"f is a function pointer, or a lambda")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"When using pointers like in the example below the range is closed, the last value is not included. A range of 0 to 2 means 0, 1."))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <algorithm>\n\nint main() {\n  int x[] = {1, 2, 3, 4, 5, 6, 7};\n\n  std::for_each(&x[0], &x[5], [](int& n){ n++; });\n}\n")),(0,l.kt)("p",null,"In this example x will end up being 2, 3, 4, 5, 6, 6, 7. The last two remain unchanged because the range is 0-5."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"none_of"},"none_of()"),(0,l.kt)("p",null,"none_of() returns true if not a single element in a range returns true"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace std {\ntemplate <class InputIterator, class Predicate> \n    bool none_of(InputIterator first, \n                 InputIterator last, \n                 Predicate pred);\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first is the first element of a range"),(0,l.kt)("li",{parentName:"ul"},"last is the last element of a range"),(0,l.kt)("li",{parentName:"ul"},"pred a function pointer or lambda that returns a boolean")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"When using pointers like in the example below the range is closed, the last value is not included. A range of 0 to 2 means 0, 1."))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <algorithm>\n#include <iostream>\n\nint main() {\n  int x[] = {3, 2, 10, 8, 2, 4};\n\n  if (std::none_of(&x[0], &x[5], [](int n){ return n%2 == 1; })) {\n    std::cout << "there is no odd element" << std::endl;\n    return 0;\n  }\n  std::cout << "all of x is even" << std::endl;\n}\n')),(0,l.kt)("p",null,"output: at least one element is odd\nbecause none of the elements in x is even, the all_of function returns true"))}c.isMDXComponent=!0}}]);